<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinePutScript</name>
    </assembly>
    <members>
        <member name="T:LinePutScript.gstr">
            <summary>
            string 可以通过强制转换进行更轻松的getset操作
            例: line[(gstr)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gstr.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gstr.op_Explicit(LinePutScript.gstr)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gstr.op_Explicit(System.String)~LinePutScript.gstr">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gbol">
            <summary>
            bool 可以通过强制转换进行更轻松的getset操作
            例: line[(gbol)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gbol.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gbol.op_Explicit(LinePutScript.gbol)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gbol.op_Explicit(System.String)~LinePutScript.gbol">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gint">
            <summary>
            int 可以通过强制转换进行更轻松的getset操作
            例: line[(gint)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gint.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gint.op_Explicit(LinePutScript.gint)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gint.op_Explicit(System.String)~LinePutScript.gint">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gi64">
            <summary>
            long 可以通过强制转换进行更轻松的getset操作
            例: line[(gi64)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gi64.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gi64.op_Explicit(LinePutScript.gi64)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gi64.op_Explicit(System.String)~LinePutScript.gi64">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gdbe">
            <summary>
            double 可以通过强制转换进行更轻松的getset操作
            例: line[(gdbe)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gdbe.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gdbe.op_Explicit(LinePutScript.gdbe)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gdbe.op_Explicit(System.String)~LinePutScript.gdbe">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gdat">
            <summary>
            DateTime 可以通过强制转换进行更轻松的getset操作
            例: line[(gdat)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gdat.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gdat.op_Explicit(LinePutScript.gdat)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gdat.op_Explicit(System.String)~LinePutScript.gdat">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.gflt">
            <summary>
            double(long) 通过转换long获得更精确的小数
            可以通过强制转换进行更轻松的getset操作
            例: line[(gflt)"subname"]
            </summary>
        </member>
        <member name="F:LinePutScript.gflt.VALUE">
            <summary>
            储存在gobject中的值
            </summary>
        </member>
        <member name="M:LinePutScript.gflt.op_Explicit(LinePutScript.gflt)~System.String">
            <summary>
            强制转换gobjcet成string
            </summary>
            <param name="gobject">gobject</param>
        </member>
        <member name="M:LinePutScript.gflt.op_Explicit(System.String)~LinePutScript.gflt">
            <summary>
            强制转换string成gobjcet
            </summary>
            <param name="str">string</param>
        </member>
        <member name="T:LinePutScript.Sub">
            <summary>
            子类 LinePutScript最基础的类
            </summary>
        </member>
        <member name="M:LinePutScript.Sub.#ctor">
            <summary>
            创建一个子类
            </summary>
        </member>
        <member name="M:LinePutScript.Sub.#ctor(System.String)">
            <summary>
            通过lpsSub文本创建一个子类
            </summary>
            <param name="lpsSub">lpsSub文本</param>
        </member>
        <member name="M:LinePutScript.Sub.#ctor(System.String,System.String)">
            <summary>
            通过名字和信息创建新的Sub
            </summary>
            <param name="name">名称</param>
            <param name="info">信息 (正常版本)</param>
        </member>
        <member name="M:LinePutScript.Sub.#ctor(System.String,System.String[])">
            <summary>
            通过名字和信息创建新的Sub
            </summary>
            <param name="name">名称</param>
            <param name="info">多个信息 (正常版本)</param>
        </member>
        <member name="M:LinePutScript.Sub.#ctor(LinePutScript.Sub)">
            <summary>
            通过Sub创建新的Sub
            </summary>
            <param name="sub">其他Sub</param>
        </member>
        <member name="M:LinePutScript.Sub.Set(LinePutScript.Sub)">
            <summary>
            将其他Sub内容拷贝到本Sub
            </summary>
            <param name="sub">其他Sub</param>
        </member>
        <member name="F:LinePutScript.Sub.Name">
            <summary>
            名称 没有唯一性
            </summary>
        </member>
        <member name="P:LinePutScript.Sub.ID">
            <summary>
            ID 根据Name生成 没有唯一性
            </summary>
        </member>
        <member name="F:LinePutScript.Sub.info">
            <summary>
            信息 (去除关键字的文本)
            </summary>
        </member>
        <member name="P:LinePutScript.Sub.Info">
            <summary>
            信息 (正常)
            </summary>
        </member>
        <member name="P:LinePutScript.Sub.InfoToInt">
            <summary>
            信息 (int)
            </summary>
        </member>
        <member name="P:LinePutScript.Sub.InfoToInt64">
            <summary>
            信息 (int64)
            </summary>
        </member>
        <member name="P:LinePutScript.Sub.InfoToDouble">
            <summary>
            信息 (double)
            </summary>
        </member>
        <member name="M:LinePutScript.Sub.GetEnumerator">
            <summary>
            返回循环访问 Info集合 的枚举数。
            </summary>
            <returns>用于 Info集合 的枚举数</returns>
        </member>
        <member name="M:LinePutScript.Sub.First">
            <summary>
            返回一个 Info集合 的第一个string。
            </summary>
            <returns>要返回的第一个string</returns>
        </member>
        <member name="M:LinePutScript.Sub.Last">
            <summary>
            返回一个 Info集合 的最后一个string。
            </summary>
            <returns>要返回的最后一个string</returns>
        </member>
        <member name="M:LinePutScript.Sub.GetInfo">
            <summary>
            退回Info的反转义文本 (正常显示)
            </summary>
            <returns>info的反转义文本 (正常显示)</returns>
        </member>
        <member name="M:LinePutScript.Sub.GetInfos">
            <summary>
            退回Info集合的转义文本集合 (正常显示)
            </summary>
            <returns>info的转义文本集合 (正常显示)</returns>
        </member>
        <member name="M:LinePutScript.Sub.TextDeReplace(System.String)">
            <summary>
            将文本进行反转义处理(成为正常显示的文本)
            </summary>
            <param name="Reptex">要反转义的文本</param>
            <returns>反转义后的文本 正常显示的文本</returns>
        </member>
        <member name="M:LinePutScript.Sub.TextReplace(System.String)">
            <summary>
            将文本进行转义处理(成为去除关键字的文本)
            </summary>
            <param name="Reptex">要转义的文本</param>
            <returns>转义后的文本 (去除关键字的文本)</returns>
        </member>
        <member name="M:LinePutScript.Sub.ToString">
            <summary>
            将当前Sub转换成文本格式 (info已经被转义/去除关键字)
            </summary>
            <returns>Sub的文本格式 (info已经被转义/去除关键字)</returns>
        </member>
        <member name="M:LinePutScript.Sub.GetHashCode">
            <summary>
            获得该Sub的哈希代码
            </summary>
            <returns>32位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.Sub.GetLongHashCode">
            <summary>
            获得该Sub的长哈希代码
            </summary>
            <returns>64位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.Sub.Equals(LinePutScript.Sub)">
            <summary>
            确认对象是否等于当前对象
            </summary>
            <param name="obj">Subs</param>
            <returns></returns>
        </member>
        <member name="M:LinePutScript.Sub.CompareTo(LinePutScript.Sub)">
            <summary>
            将当前sub与另一个sub进行比较,并退回一个整数指示在排序位置中是位于另一个对象之前之后还是相同位置
            </summary>
            <param name="other">另一个sub</param>
            <returns>值小于零时排在 other 之前 值等于零时出现在相同排序位置 值大于零则排在 other 之后</returns>
        </member>
        <member name="M:LinePutScript.Sub.Clone">
            <summary>
            克隆一个Sub
            </summary>
            <returns>相同的sub</returns>
        </member>
        <member name="T:LinePutScript.Line">
            <summary>
            行 包含多个子类 继承自子类
            </summary>
        </member>
        <member name="M:LinePutScript.Line.#ctor">
            <summary>
            创建一行
            </summary>
        </member>
        <member name="M:LinePutScript.Line.#ctor(System.String)">
            <summary>
            通过lpsLine文本创建一行
            </summary>
            <param name="lpsLine">lpsSub文本</param>
        </member>
        <member name="M:LinePutScript.Line.#ctor(System.String,System.String,System.String,LinePutScript.Sub[])">
            <summary>
            通过名字和信息创建新的Line
            </summary>
            <param name="name">名称</param>
            <param name="info">信息 (正常)</param>
            <param name="text">文本 在末尾没有结束行号的文本 (正常)</param>
            <param name="subs">子类集合</param>
        </member>
        <member name="M:LinePutScript.Line.#ctor(LinePutScript.Line)">
            <summary>
            通过其他Line创建新的Line
            </summary>
            <param name="line">其他line</param>
        </member>
        <member name="M:LinePutScript.Line.Set(LinePutScript.Line)">
            <summary>
            将其他Line内容拷贝到本Line
            </summary>
            <param name="line">其他line</param>
        </member>
        <member name="F:LinePutScript.Line.text">
            <summary>
            文本 在末尾没有结束行号的文本 (去除关键字的文本)
            </summary>
        </member>
        <member name="P:LinePutScript.Line.Text">
            <summary>
            文本 在末尾没有结束行号的文本 (正常)
            </summary>
        </member>
        <member name="F:LinePutScript.Line.Comments">
            <summary>
            注释 ///为注释
            </summary>
        </member>
        <member name="P:LinePutScript.Line.TextToInt">
            <summary>
            文本 (int)
            </summary>
        </member>
        <member name="P:LinePutScript.Line.TextToInt64">
            <summary>
            文本 (int64)
            </summary>
        </member>
        <member name="P:LinePutScript.Line.TextToDouble">
            <summary>
            文本 (double)
            </summary>
        </member>
        <member name="M:LinePutScript.Line.GetText">
            <summary>
            退回Text的反转义文本 (正常显示)
            </summary>
            <returns>Text的反转义文本 (正常显示)</returns>
        </member>
        <member name="F:LinePutScript.Line.Subs">
            <summary>
            子项目
            </summary>
        </member>
        <member name="M:LinePutScript.Line.AddSub(LinePutScript.Sub)">
            <summary>
            将指定的Sub添加到Subs列表的末尾
            </summary>
            <param name="newSub">要添加的Sub</param>
        </member>
        <member name="M:LinePutScript.Line.AddorReplaceSub(LinePutScript.Sub)">
            <summary>
            若无相同名称(Name)的Sub,则将指定的Sub添加到Subs列表的末尾
            若有,则替换成要添加的Sub
            </summary>
            <param name="newSub">要添加的Sub</param>
        </member>
        <member name="M:LinePutScript.Line.AddRange(LinePutScript.Sub[])">
            <summary>
            将指定Sub的元素添加到Subs的末尾
            </summary>
            <param name="newSubs">要添加的多个Sub</param>
        </member>
        <member name="M:LinePutScript.Line.InsertSub(System.Int32,LinePutScript.Sub)">
            <summary>
            将指定的Sub添加到指定索引处
            </summary>
            <param name="index">应插入 Sub 的从零开始的索引</param>
            <param name="newSub">要添加的Sub</param>
        </member>
        <member name="M:LinePutScript.Line.InsertRange(System.Int32,LinePutScript.Sub[])">
            <summary>
            将指定Sub的元素添加指定索引处
            </summary>
            <param name="index">应插入 Sub 的从零开始的索引</param>
            <param name="newSubs">要添加的多个Sub</param>
        </member>
        <member name="M:LinePutScript.Line.Remove(LinePutScript.Sub)">
            <summary>
            从Subs中移除特定对象的第一个匹配项
            </summary>
            <param name="Sub">要从Subs中删除的Sub</param>
            <returns>如果成功移除了Sub,则为 true; 否则为 false</returns>
        </member>
        <member name="M:LinePutScript.Line.Remove(System.String)">
            <summary>
            从Subs中移除特定名称的第一个匹配项
            </summary>
            <param name="SubName">要从Subs中删除的Sub的名称</param>
            <returns>如果成功移除了Sub,则为 true; 否则为 false</returns>
        </member>
        <member name="M:LinePutScript.Line.RemoveAll(System.String)">
            <summary>
            从Subs中移除特定名称的所有元素
            </summary>
            <param name="SubName">要从Subs中删除的Sub的名称</param>
        </member>
        <member name="M:LinePutScript.Line.Contains(LinePutScript.Sub)">
            <summary>
            确定某Sub是否在Line集合中
            </summary>
            <param name="sub">要在Line集合中定位的Sub</param>
            <returns>如果在Line集合中找到sub,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.Line.Contains(System.String)">
            <summary>
            返回一个值,该值指示指定的字段是否出现在Subs的Sub的名字
            </summary>
            <param name="value">字段</param>
            <returns>如果在Line集合中找到符合的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.Line.Have(System.String)">
            <summary>
            确定某Sub是否在Line集合中
            </summary>
            <param name="subName">要在Line集合中定位的Sub的名字</param>
            <returns>如果在Line集合中找到符合的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.Line.FindAll(System.String)">
            <summary>
            匹配拥有相同名称的Line或sub的所有元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.Line.FindAll(System.String,System.String)">
            <summary>
            匹配拥有相同名称和信息的Line或sub的所有元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.Line.FindAllInfo(System.String)">
            <summary>
            匹配拥有相同信息的Line或sub的所有元素
            </summary>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.Line.Find(System.String)">
            <summary>
            搜索与指定名称,并返回Line或整个Subs中的第一个匹配元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个sub,则为该sub; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.Line.Find(System.String,System.String)">
            <summary>
            搜索与指定名称,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.Line.FindInfo(System.String)">
            <summary>
            搜索与指定信息,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.Line.FindorAdd(System.String)">
            <summary>
            搜索与指定名称,并返回Line或整个Subs中的第一个匹配元素;若未找到,则新建并添加相同名称的Sub,并且返回这个Sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个sub,则为该sub; 否则为新建的相同名称sub</returns>
        </member>
        <member name="M:LinePutScript.Line.SeachALL(System.String)">
            <summary>
            搜索全部相似名称的Sub的所有元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相似名称的Sub,则为数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.Line.Seach(System.String)">
            <summary>
            搜索字段是否出现在Line名称,并返回整个Subs中的第一个匹配元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相似名称的第一个Sub,则为该Sub; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.Line.IndexOf(System.String)">
            <summary>
            搜索相同名称的Sub,并返回整个Subs中第一个匹配的sub从零开始的索引
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的sub的第一个元素,则为该元素的从零开始的索引; 否则为 -1</returns>
        </member>
        <member name="M:LinePutScript.Line.IndexsOf(System.String)">
            <summary>
            搜索相同名称的Sub,并返回整个Sub中全部匹配的sub从零开始的索引
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的sub的元素,则为该元素的从零开始的索引组; 否则为空的Array</returns>
        </member>
        <member name="M:LinePutScript.Line.ToString">
            <summary>
            将当前Line转换成文本格式 (info已经被转义/去除关键字)
            </summary>
            <returns>Line的文本格式 (info已经被转义/去除关键字)</returns>
        </member>
        <member name="M:LinePutScript.Line.GetLongHashCode">
            <summary>
            获得该Line的长哈希代码
            </summary>
            <returns>64位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.Line.GetHashCode">
            <summary>
            获得该Line的哈希代码
            </summary>
            <returns>32位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.Line.Equals(LinePutScript.Line)">
            <summary>
            确认对象是否等于当前对象
            </summary>
            <param name="obj">Subs</param>
            <returns></returns>
        </member>
        <member name="M:LinePutScript.Line.GetEnumerator">
            <summary>
            返回循环访问 Subs 的枚举数。
            </summary>
            <returns>用于 Subs 的枚举数</returns>
        </member>
        <member name="M:LinePutScript.Line.First">
            <summary>
            返回一个 Subs 的第一个元素。
            </summary>
            <returns>要返回的第一个元素</returns>
        </member>
        <member name="M:LinePutScript.Line.Last">
            <summary>
            返回一个 Subs 的最后一个元素。
            </summary>
            <returns>要返回的最后一个元素</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(System.String)">
            <summary>
            搜索与指定名称,并返回Line或整个Subs中的第一个匹配元素;若未找到,则新建并添加相同名称的Sub,并且返回这个Sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个sub,则为该sub; 否则为新建的相同名称sub</returns>
        </member>
        <member name="M:LinePutScript.Line.GetBool(System.String)">
            <summary>
            获得bool属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的sub,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.Line.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">
            如果为ture,则在没有相同name为subName的sub时候添加新的sub
            如果为false,则删除所有name为subName的sub
            </param>
        </member>
        <member name="M:LinePutScript.Line.GetInt(System.String,System.Int32)">
            <summary>
            获得int属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的int值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetInt(System.String,System.Int32)">
            <summary>
            设置int属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的int值</param>
        </member>
        <member name="M:LinePutScript.Line.GetInt64(System.String,System.Int64)">
            <summary>
            获得long属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的long值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetInt64(System.String,System.Int64)">
            <summary>
            设置long属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的long值</param>
        </member>
        <member name="M:LinePutScript.Line.GetFloat(System.String,System.Double)">
            <summary>
            获得double(long)属性的sub 通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的double(long)值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetFloat(System.String,System.Double)">
            <summary>
            设置double(long)属性的sub 通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的double(long)值</param>
        </member>
        <member name="M:LinePutScript.Line.GetDateTime(System.String,System.DateTime)">
            <summary>
            获得DateTime属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的DateTime值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetDateTime(System.String,System.DateTime)">
            <summary>
            设置DateTime属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的DateTime值</param>
        </member>
        <member name="M:LinePutScript.Line.GetString(System.String,System.String)">
            <summary>
            获得String属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的String值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetString(System.String,System.String)">
            <summary>
            设置String属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的String值</param>
        </member>
        <member name="M:LinePutScript.Line.GetDouble(System.String,System.Double)">
            <summary>
            获得double属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的sub,返回sub中储存的double值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.Line.SetDouble(System.String,System.Double)">
            <summary>
            设置double属性的sub
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="value">储存进sub的double值</param>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gstr)">
            <summary>
            获取或设置 String 属性的sub
            </summary>
            <param name="subName">(gstr)用于定义匹配的名称</param>
            <returns>获取或设置对 String 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gbol)">
            <summary>
            获取或设置 Bool 属性的sub
            </summary>
            <param name="subName">(gbol)用于定义匹配的名称</param>
            <returns>获取或设置对 bool 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gint)">
            <summary>
            获取或设置 Int 属性的sub
            </summary>
            <param name="subName">(gint)用于定义匹配的名称</param>
            <returns>获取或设置对 int 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gi64)">
            <summary>
            获取或设置 Long 属性的sub
            </summary>
            <param name="subName">(gi64)用于定义匹配的名称</param>
            <returns>获取或设置对 long 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gdbe)">
            <summary>
            获取或设置 Double 属性的sub
            </summary>
            <param name="subName">(gdbe)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gflt)">
            <summary>
            获取或设置 Double(long) 属性的sub  通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="subName">(gflt)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Item(LinePutScript.gdat)">
            <summary>
            获取或设置 DateTime 属性的sub
            </summary>
            <param name="subName">(gdbe)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的Sub</returns>
        </member>
        <member name="P:LinePutScript.Line.Count">
            <summary>
            获取Sub数量
            </summary>
        </member>
        <member name="P:LinePutScript.Line.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:LinePutScript.Line.Item(System.Int32)">
            <summary>
            通过引索修改Line中Sub内容
            </summary>
            <param name="index">要获得或设置的引索</param>
            <returns>引索指定的Sub</returns>
        </member>
        <member name="M:LinePutScript.Line.IndexOf(LinePutScript.Sub)">
            <summary>
            搜索相同名称的Sub,并返回整个Subs中第一个匹配的Sub从零开始的索引
            </summary>
            <param name="sub">用于定义匹配的Sub</param>
            <returns>如果找到相同名称的Sub的第一个元素,则为该元素的从零开始的索引; 否则为 -1</returns>
        </member>
        <member name="M:LinePutScript.Line.Insert(System.Int32,LinePutScript.Sub)">
            <summary>
            将指定的Sub添加到指定索引处
            </summary>
            <param name="index">应插入 Sub 的从零开始的索引</param>
            <param name="newSub">要添加的Sub</param>
        </member>
        <member name="M:LinePutScript.Line.RemoveAt(System.Int32)">
            <summary>
            从Subs中移除特定引索的Sub
            </summary>
            <param name="index">要删除Sub的引索</param>
        </member>
        <member name="M:LinePutScript.Line.Add(LinePutScript.Sub)">
            <summary>
            将指定的Sub添加到Subs列表的末尾
            </summary>
            <param name="newSub">要添加的Sub</param>
        </member>
        <member name="M:LinePutScript.Line.Clear">
            <summary>
            移除Line中所有的Sub
            </summary>
        </member>
        <member name="M:LinePutScript.Line.CopyTo(LinePutScript.Sub[],System.Int32)">
            <summary>
            将整个array复制到Line的Subs
            </summary>
            <param name="array">复制到Subs的Sub列表</param>
            <param name="arrayIndex">从零开始的引索,从引索处开始复制</param>
        </member>
        <member name="M:LinePutScript.Line.CompareTo(LinePutScript.Line)">
            <summary>
            将当前line与另一个line进行比较,并退回一个整数指示在排序位置中是位于另一个对象之前之后还是相同位置
            </summary>
            <param name="other">另一个line</param>
            <returns>值小于零时排在 other 之前 值等于零时出现在相同排序位置 值大于零则排在 other 之后</returns>
        </member>
        <member name="M:LinePutScript.Line.Clone">
            <summary>
            克隆一个Line
            </summary>
            <returns>相同的Line</returns>
        </member>
        <member name="T:LinePutScript.LpsDocument">
            <summary>
            文件 包括文件读写等一系列操作
            </summary>
        </member>
        <member name="F:LinePutScript.LpsDocument.Assemblage">
            <summary>
            集合 全部文件的数据
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.#ctor">
            <summary>
            创建一个 LpsDocument
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.#ctor(System.String)">
            <summary>
            从指定的字符串创建 LpsDocument
            </summary>
            <param name="lps">包含要加载的LPS文档的字符串</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AddLine(LinePutScript.Line)">
            <summary>
            将指定的Line添加到Assemblage列表的末尾
            </summary>
            <param name="newLine">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AddorReplaceLine(LinePutScript.Line)">
            <summary>
            若无相同名称(Name)的Line,则将指定的Line添加到Assemblage列表的末尾
            若有,则替换成要添加的Line
            </summary>
            <param name="newLine">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AddRange(LinePutScript.Line[])">
            <summary>
            将指定Line的元素添加到Assemblage的末尾
            </summary>
            <param name="newLines">要添加的多个Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AddRange(System.Collections.Generic.IEnumerable{LinePutScript.Line})">
            <summary>
            将指定Line的元素添加到Assemblage的末尾
            </summary>
            <param name="newLines">要添加的多个Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.InsertLine(System.Int32,LinePutScript.Line)">
            <summary>
            将指定的Line添加到指定索引处
            </summary>
            <param name="index">应插入 Line 的从零开始的索引</param>
            <param name="newLine">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.InsertRange(System.Int32,LinePutScript.Line[])">
            <summary>
            将指定Line的元素添加指定索引处
            </summary>
            <param name="index">应插入 Line 的从零开始的索引</param>
            <param name="newLines">要添加的多个Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{LinePutScript.Line})">
            <summary>
            将指定Line的元素添加指定索引处
            </summary>
            <param name="index">应插入 Line 的从零开始的索引</param>
            <param name="newLines">要添加的多个Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.Remove(LinePutScript.Line)">
            <summary>
            从Assemblage中移除特定对象的第一个匹配项
            </summary>
            <param name="line">要从Assemblage中删除的Line的名称</param>
            <returns>如果成功移除了line,则为 true; 否则为 false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Remove(System.String)">
            <summary>
            从Assemblage中移除特定名称的第一个匹配项
            </summary>
            <param name="lineName">要从Assemblage中删除的Line的名称</param>
            <returns>如果成功移除了line,则为 true; 否则为 false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.RemoveAll(LinePutScript.Line)">
            <summary>
            从Assemblage中移除移除与条件相匹配的所有Line
            </summary>
            <param name="line">要从Assemblage中删除的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.RemoveAll(System.String)">
            <summary>
            从Assemblage中移除移除与名称相匹配的所有Line
            </summary>
            <param name="lineName">要从Assemblage中删除的Line的名称</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.RemoveAt(System.Int32)">
            <summary>
            移除Assemblage的指定索引处的Line
            </summary>
            <param name="index">要移除的Line的从零开始的索引</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.Contains(LinePutScript.Line)">
            <summary>
            确定某Line是否在Assemblage中
            </summary>
            <param name="line">要在Assemblage中定位的Line</param>
            <returns>如果在Assemblage中找到line,则为True; 否则为false </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Contains(LinePutScript.Sub)">
            <summary>
            确定某Sub是否在Assemblage中
            </summary>
            <param name="sub">要在Assemblage中定位的Sub</param>
            <returns>如果在Assemblage中找到line,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.ContainsLine(System.String)">
            <summary>
            返回一个值,该值指示指定的字段是否出现在Assemblage的line的名字。
            </summary>
            <param name="value">字段</param>
            <returns>如果在Assemblage的line中找到与value相似的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.ContainsSub(System.String)">
            <summary>
            返回一个值,该值指示指定的字段是否出现在Assemblage的Line或里面的Sub的名字
            </summary>
            <param name="value">字段</param>
            <returns>如果在Assemblage的line和line里面的sub中找到相似的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.HaveLine(System.String)">
            <summary>
            确定某Line(名字定位)是否在Assemblage中
            </summary>
            <param name="lineName">Line的名字</param>
            <returns>如果在Assemblage中找到相同的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.HaveSub(System.String)">
            <summary>
            确定某sub(名字定位)是否在Assemblage中
            </summary>
            <param name="subName">sub的名字</param>
            <returns>如果在Assemblage的sub中找到相同的名字,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllLine(System.String)">
            <summary>
            匹配拥有相同名称的Line的所有元素
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的Line,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllLine(System.String,System.String)">
            <summary>
            匹配拥有相同名称和信息的Line的所有元素
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="lineinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的Line,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllLineInfo(System.String)">
            <summary>
            匹配拥有相同信息的Line的所有元素
            </summary>
            <param name="lineinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的Line,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindLine(System.String)">
            <summary>
            搜索与指定名称,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindLine(System.String,System.String)">
            <summary>
            搜索与指定名称和信息,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="lineinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindLineInfo(System.String)">
            <summary>
            搜索与指定信息,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="lineinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindorAddLine(System.String)">
            <summary>
            搜索与指定名称,并返回整个Assemblage中的第一个匹配元素; 若未找到,则新建并添加相同名称的Line,并且返回这个Line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个Line,则为该Line; 否则为新建的相同名称Line</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllSub(System.String)">
            <summary>
            匹配拥有相同名称的Sub的所有元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的Sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllSub(System.String,System.String)">
            <summary>
            匹配拥有相同名称和信息的Sub的所有元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的Sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindAllSubInfo(System.String)">
            <summary>
            匹配拥有相同信息的Sub的所有元素
            </summary>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的Sub,其中所有元素均与指定谓词定义的条件匹配,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindSub(System.String)">
            <summary>
            搜索与指定名称,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个Sub,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindSub(System.String,System.String)">
            <summary>
            搜索与指定名称和信息,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="subName">用于定义匹配的名称</param>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同名称和信息的第一个Sub,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.FindSubInfo(System.String)">
            <summary>
            搜索与指定信息,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="subinfo">用于定义匹配的信息 (去除关键字的文本)</param>
            <returns>如果找到相同信息的第一个Sub,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SearchAllLine(System.String)">
            <summary>
            搜索全部相似名称的Line的所有元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相似名称的Line,则为数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SearchLine(System.String)">
            <summary>
            搜索字段是否出现在Line名称,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相似名称的第一个Line,则为该Line; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SearchAllSub(System.String)">
            <summary>
            搜索全部相似名称的Sub的所有元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相似名称的Line,则为该数组; 否则为一个空的Array</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SearchSub(System.String)">
            <summary>
            搜索字段是否出现在Sub名称,并返回整个Assemblage中的第一个匹配元素
            </summary>
            <param name="value">字段</param>
            <returns>如果找到相同名称的第一个Sub,则为该Sub; 否则为null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.IndexOf(System.String)">
            <summary>
            搜索相同名称的Line,并返回整个Assemblage中第一个匹配的Line从零开始的索引
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的Line的第一个元素,则为该元素的从零开始的索引; 否则为 -1</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.IndexsOf(System.String)">
            <summary>
            搜索相同名称的Line,并返回整个Assemblage中全部匹配的Line从零开始的索引
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的Line的元素,则为该元素的从零开始的索引组; 否则为空的Array</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Count">
            <summary>
            获得Assemblage目前储存的Line数量
            </summary>
        </member>
        <member name="P:LinePutScript.LpsDocument.LineNode">
            <summary>
            当前Line读取进度
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.ReadNext">
            <summary>
            读取读取进度当前Line 并且自动切换到下一Line
            </summary>
            <returns>如何有则返回当前Line,如果没有则返回null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Read">
            <summary>
            获取读取进度当前Line
            </summary>
            <returns>如何有则返回当前Line,如果没有则返回null</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Append(LinePutScript.Line)">
            <summary>
            将指定的Line添加到当前读取进度之后
            </summary>
            <param name="newline">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.Append(System.String,System.String,System.String,LinePutScript.Sub[])">
            <summary>
            新建的Line添加到当前读取进度之后
            </summary>
            <param name="newlineName">要添加的行名称</param>
            <param name="info">行信息</param>
            <param name="text">行文本</param>
            <param name="subs">行子类</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AppendSub(LinePutScript.Sub[])">
            <summary>
            将指定的Sub添加到当前读取进度Line中
            </summary>
            <param name="newSub">要添加的子类</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.AppendSub(System.String,System.String)">
            <summary>
            将指定的Sub添加到当前读取进度Line中
            </summary>
            <param name="newSubName">要添加的行名称</param>
            <param name="info">要添加的行信息</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.ReadReset">
            <summary>
            将读取进度设置为0
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.ReadEnd">
            <summary>
            将读取进度设置为上限 即最后一行
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.ReadCanNext">
            <summary>
            判断是否能够继续读取数据
            </summary>
            <returns>如果还有下一行,返回True,否则False</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Load(System.String)">
            <summary>
            从指定的字符串加载LPS文档
            </summary>
            <param name="lps">包含要加载的LPS文档的字符串</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.First">
            <summary>
            返回一个Assemblage的第一个元素。
            </summary>
            <returns>要返回的第一个元素</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Last">
            <summary>
            返回一个Assemblage的最后一个元素。
            </summary>
            <returns>要返回的最后一个元素</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetEnumerator">
            <summary>
            返回循环访问 Assemblage 的枚举数。
            </summary>
            <returns>用于 Assemblage 的枚举数</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(System.String)">
            <summary>
            搜索与指定名称,并返回整个Assemblage中的第一个匹配元素; 若未找到,则新建并添加相同名称的Line,并且返回这个Line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的第一个Line,则为该Line; 否则为新建的相同名称Line</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.ToString">
            <summary>
            将当前Documents转换成文本格式
            </summary>
            <returns>LinePutScript的文本格式</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetLongHashCode">
            <summary>
            获得该LPS文档的长哈希代码
            </summary>
            <returns>64位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetHashCode">
            <summary>
            获得该LPS文档的哈希代码
            </summary>
            <returns>32位哈希代码</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Equals(System.Object)">
            <summary>
            确认对象是否等于当前对象
            </summary>
            <param name="obj">Subs</param>
            <returns></returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Length">
            <summary>
            获得当前文档大小 单位:字符
            </summary>
        </member>
        <member name="P:LinePutScript.LpsDocument.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(System.Int32)">
            <summary>
            通过引索修改lps中Line内容
            </summary>
            <param name="index">要获得或设置的引索</param>
            <returns>引索指定的Line</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetBool(System.String)">
            <summary>
            获得bool属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <returns>如果找到相同名称的line,则为True; 否则为false</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetBool(System.String,System.Boolean)">
            <summary>
            设置bool属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">
            如果为ture,则在没有相同name为lineName的line时候添加新的line
            如果为false,则删除所有name为lineName的line
            </param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetInt(System.String,System.Int32)">
            <summary>
            获得int属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的int值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetInt(System.String,System.Int32)">
            <summary>
            设置int属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的int值</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetInt64(System.String,System.Int64)">
            <summary>
            获得long属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的long值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetInt64(System.String,System.Int64)">
            <summary>
            设置long属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的long值</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetString(System.String,System.String)">
            <summary>
            获得String属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的string值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetString(System.String,System.String)">
            <summary>
            设置String属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的String值</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetDouble(System.String,System.Double)">
            <summary>
            获得double属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的double值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetDouble(System.String,System.Double)">
            <summary>
            设置double属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的double值</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetFloat(System.String,System.Double)">
            <summary>
            获得double(long)属性的line 通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的double(long)值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetFloat(System.String,System.Double)">
            <summary>
            设置double(long)属性的line 通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的double(long)值</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.GetDateTime(System.String,System.DateTime)">
            <summary>
            获得DateTime属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="defaultvalue">如果没找到返回的默认值</param>
            <returns>
            如果找到相同名称的line,返回line中储存的DateTime值
            如果没找到,则返回默认值
            </returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.SetDateTime(System.String,System.DateTime)">
            <summary>
            设置DateTime属性的line
            </summary>
            <param name="lineName">用于定义匹配的名称</param>
            <param name="value">储存进line的DateTime值</param>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gstr)">
            <summary>
            获取或设置 String 属性的line
            </summary>
            <param name="lineName">(gstr)用于定义匹配的名称</param>
            <returns>获取或设置对 String 属性的Line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gbol)">
            <summary>
            获取或设置 Bool 属性的line
            </summary>
            <param name="lineName">(gbol)用于定义匹配的名称</param>
            <returns>获取或设置对 bool 属性的Line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gint)">
            <summary>
            获取或设置 Int 属性的line
            </summary>
            <param name="lineName">(gint)用于定义匹配的名称</param>
            <returns>获取或设置对 int 属性的Line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gi64)">
            <summary>
            获取或设置 Long 属性的line
            </summary>
            <param name="lineName">(gi64)用于定义匹配的名称</param>
            <returns>获取或设置对 long 属性的Line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gdbe)">
            <summary>
            获取或设置 Double 属性的line
            </summary>
            <param name="lineName">(gdbe)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的Line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gflt)">
            <summary>
            获取或设置 Double(long) 属性的line  通过转换long获得更精确的小数,小数位最大保留9位
            </summary>
            <param name="lineName">(gflt)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的line</returns>
        </member>
        <member name="P:LinePutScript.LpsDocument.Item(LinePutScript.gdat)">
            <summary>
            获取或设置 DateTime 属性的line
            </summary>
            <param name="lineName">(gdbe)用于定义匹配的名称</param>
            <returns>获取或设置对 double 属性的line</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.IndexOf(LinePutScript.Line)">
            <summary>
            搜索相同Line,并返回整个Assemblage中第一个匹配的Line从零开始的索引
            </summary>
            <param name="line">用于定义匹配的Line</param>
            <returns>如果找到相同名称的Line的第一个元素,则为该元素的从零开始的索引; 否则为 -1</returns>
        </member>
        <member name="M:LinePutScript.LpsDocument.Insert(System.Int32,LinePutScript.Line)">
            <summary>
            将指定的Line添加到指定索引处
            </summary>
            <param name="index">应插入 Line 的从零开始的索引</param>
            <param name="newLine">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.Add(LinePutScript.Line)">
            <summary>
            将指定的Line添加到Assemblage列表的末尾
            </summary>
            <param name="newLine">要添加的Line</param>
        </member>
        <member name="M:LinePutScript.LpsDocument.Clear">
            <summary>
            移除Assemblage中所有的Line
            </summary>
        </member>
        <member name="M:LinePutScript.LpsDocument.CopyTo(LinePutScript.Line[],System.Int32)">
            <summary>
            将整个array复制到Assemblage
            </summary>
            <param name="array">复制到Assemblage的Line列表</param>
            <param name="arrayIndex">从零开始的引索,从引索处开始复制</param>
        </member>
    </members>
</doc>
